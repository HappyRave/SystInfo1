#include "filterBand.h"

//constante à initialiser en début de programme
static int NFILTERS;
static int NPACK; //nombre de paquet de ligne : toutes les images comprises
static int NBLUR;
static int NIMAGE;

void initializeStatic(int nFilters, int nPack, int nBlur, int nImage) {
	NFILTERS = nFilters;
	NPACK = nPack;
	NBLUR = nBlur;
	NIMAGE = nImage;
}

/*
#define NFILTERS nFILTERS
#define NPACK nPACK // a régler plus tard
#define NBLUR nBLUR
#define NIMAGE nIMAGE
 */

#define NFILTERS_MAX 24
#define NPACK_MAX 2400
#define NBLUR_MAX 8
#define NIMAGE_MAX 128

int lcm(int a, int b) {
	int i;
	for (i=1; i<a*b; i++) {
		if (i%a == 0 && i%b == 0) {
			return i;
		}
	}
	return -1;
}

int lcmArray(int a[], int len) {
	int lc = lcm(a[0],a[1]);
	int i;
	for (i=2; i<len; i++) {
		lc = lcm(lc,a[i]);
	}
	if (lc > NPACK_MAX) {
		error(-1,"NPACK_MAX trop petit\n");
	}
	return lc;
}

elem_buf *mat_buf[NFILTERS_MAX][NPACK_MAX]; //la matrice dont les lignes sont les buffer. La première ligne de cette matrice sera remplie par la méthode qui charge et divise les images.
	
static int mat_blur[NBLUR_MAX][NIMAGE_MAX]; //la matrice pour gérer les blur
static pthread_mutex_t blur_mutex[NBLUR_MAX][NIMAGE_MAX]; //chaque élément du tableau doit être protégé par un mutex. Car, pour un blur, on peut incrémenter deux cases en même temps, mais pas en même temps la même case.
	
static sem_t full[NFILTERS_MAX]; //nos sémaphores
static sem_t empty[NFILTERS_MAX];
static pthread_mutex_t buf_mutex[NFILTERS_MAX]; //il faut protéger les buffers, comme expliqué dans les notes du producteur-consommateur.
	
static int f_isblur[NFILTERS_MAX];
static int f_beforeblur[NFILTERS_MAX];
	
static int isdone[NFILTERS_MAX];
static pthread_mutex_t isdone_mutex[NFILTERS_MAX];


void imagesCut(struct image* image[]) {
	int nPack = NPACK/NIMAGE;
	int i;
	printf("NIMAGE : %d\n", NIMAGE);
	for (i=0; i<NIMAGE; i++) {
		
		int mod = image[i]->height%nPack;
		if (mod > 0)
			mod = 1;
		int band = (image[i]->height)/nPack + mod;
		
		int j;
		for (j=0; j<nPack; j++) {
			mat_buf[0][i+j] = (elem_buf*)malloc(sizeof(elem_buf));
			mat_buf[0][i+j]->img = image[i];
			mat_buf[0][i+j]->num_img = i;
			mat_buf[0][i+j]->begin = j*band;
			mat_buf[0][i+j]->finish = (j+1)*band-1;
		}
	}
}

int initializeBlur(char* filters[]){
	int i;
	int n = 1;
	for (i=0; i<NFILTERS; i++) {
		if (!strncasecmp(filters[i],"blur",4)) {
			f_isblur[i] = n;
			if (i>0) {
				f_beforeblur[i-1] = n;
			}
			n++;
		} else {
			f_isblur[i] = 0;
			if (i>0) {
				f_beforeblur[i-1] = 0;
			}
		}
	}
	return n-1;
}

int numberBlur(char* filters[], int len) {
	int n = 0;
	int i;
	for (i=0; i<len; i++) {
		if (!strncasecmp(filters[i],"blur",4))
			n++;
	}
	return n;
}

int image_copi(int img, int num) {
	int nPack = NPACK/NIMAGE;
	
	struct image* image = (struct image*)malloc(sizeof(struct image));
	if (image == NULL)
		error(-1,"Erreur de malloc dans image_copi\n");
	
	image->width = mat_buf[num][nPack*img]->img->width;
	image->height = mat_buf[num][nPack*img]->img->height;
	
	struct pixel* pixels = (struct pixel*)malloc(sizeof(struct pixel)*image->width*image->height);
	if (image == NULL)
		error(-1,"Erreur de malloc dans image_copi\n");
	
	memcpy(pixels,mat_buf[num][nPack*img]->img->pixels,sizeof(struct pixel)*image->width*image->height);
	
	image->pixels = pixels;
	
	int i;
	for (i=0; i<nPack; i++) {
		mat_buf[num][nPack*img+i]->read_only = image;
	}
	return 0;
}

int image_copi_destroy(int img, int num) {
	int nPack = NPACK/NIMAGE;
	if (mat_buf[num][nPack*img]->read_only != NULL) {
		if (mat_buf[num][nPack*img]->read_only->pixels != NULL) {
			free(mat_buf[num][nPack*img]->read_only->pixels);
		}
		free(mat_buf[num][nPack*img]->read_only);
	}
	int i;
	for (i=0; i<nPack; i++) {
		mat_buf[num][nPack*img+i]->read_only = NULL;
	}
	return 0;
}


void error(int err, char *msg) {
	fprintf(stderr,"%s a retourné %d. Message d'erreur : %s\n",msg,err,strerror(errno));
	exit(EXIT_FAILURE);
}

//reçoit une ligne de mat_buffer et renvoit le premier pointeur non-NULL qu'il croise et met NULL à sa place dans la ligne de mat_buf. Erreur si tous les pointeurs sont NULL.
elem_buf *take_elem(int ligne_mat_buf) {
	int i=0;
	while(i<NPACK) {
		if(mat_buf[ligne_mat_buf][i]==NULL) {
			i++;
		} else {
			elem_buf **retour = &(mat_buf[ligne_mat_buf][i]); //besoin d'un double pointeur sinon retour est effacé de la pile
			mat_buf[ligne_mat_buf][i] = NULL;
			return *retour;
		}
	}
	error(-1,"take-elem n'a pas trouvé d'éléments non-nul et ");
	return NULL;
}

/*
 * même principe que take_elem mais cette fois-ci, on permet de spécifier l'image qu'on veut que l'elem_buf retourné contienne. Utilisé par le productor dans le cas du filtre blur.
 */
elem_buf *take_elem_image(int ligne_mat_buf,int nimage) {
	int i=0;
	while(i<NPACK) {
		if((mat_buf[ligne_mat_buf][i]==NULL)||(((mat_buf[ligne_mat_buf][i])->num_img)!=nimage)) {
			i++;
		} else {
			elem_buf **retour = &(mat_buf[ligne_mat_buf][i]); //besoin d'un double pointeur sinon retour est effacé de la pile
			mat_buf[ligne_mat_buf][i] = NULL;
			return *retour;
		}
	}
	error(-1,"take-elem_image n'a pas trouvé d'éléments non-nul ayant l'image spécifié et ");
	return NULL;
}

//utilisé par le producteur. On lui donne juste le numéro du filtre et il prend un élément du buffer précédent le filtre et le renvoit. Aussi, il faut lui donner le numéro de l'image. S'il vaut -1, c'est que toutes les images sont bonnes.
elem_buf *consommator(int num_filter, int nimage) {
	int err;
	err = sem_wait(&(full[num_filter]));//le numéro du filtre désigne la ligne de mat_buf où il faut lire : si on a le filtre 0, la ligne 0 est remplie donc il faut lire dedans
	if (err!=0) 
		error(err,"sem_wait pour full dans consommator");
	
	err = pthread_mutex_lock(&(buf_mutex[num_filter]));
	
	if (err!=0)
		error(err,"pthread_mutex_lock pour buf_mutex dans consommateur");
	
	//il faut prendre un pointeur elem_buffer de la ligne précédente, le renvoyer et mettre cet élément à null dans le buffer précédent : via take-elem
	elem_buf *retour;
	if(nimage==-1) {
		elem_buf* tmp = take_elem(num_filter);
		retour = tmp;
	} else {
		elem_buf* tmp = take_elem_image(num_filter,nimage);
		retour = tmp;
	}
	
	err = pthread_mutex_unlock(&(buf_mutex[num_filter]));
	if (err!=0)
		error(err,"pthread_mutex_unlock pour buf_mutex dans consommateur");
	
	err = sem_post(&(empty[num_filter]));
	if (err!=0)
		error(err,"sem_post pour empty dans consommator");

	printf("adresse retour : %p\n",retour);
	return retour;
}

//insère un double pointeur vers un elem_buf dans une ligne une ligne de mat_buf et le met à une case non-null de la ligne. Si toutes les case sont null, renvoit un erreur.
void insert_elem(elem_buf **paquet, int lmat_buf) {
	int i=0;
	
	while(i<NPACK) {
		if((mat_buf[lmat_buf][i])!=NULL) {
			i++;
		} else {
			mat_buf[lmat_buf][i]=*paquet;
			i=NPACK+1;
		}
	}
	if(i==NPACK)
		error(-1,"insert_elem n'a pas trouvé de place vide et");
}

//fonction qui met à jour isdone en fonction du numéro du filtre
void update_isdone(int nfiltre) {
	int err;
	err = pthread_mutex_lock(&(isdone_mutex[nfiltre]));
	if (err!=0)
		error(err,"pthread_mutex_lock pour isdone_mutex dans producteur");
	
	(isdone[nfiltre])++;
	
	err = pthread_mutex_unlock(&(isdone_mutex[nfiltre]));
	if (err!=0)
		error(err,"pthread_mutex_unlock pour isdone_mutex dans producteur");
}

/*
 * Verifie qu'à la ligne L dans mat_blur, il y a un élément qui vaut NPACK. Si oui, il renvoie l'indice de cet élément, sinon, il renvoie -1.
 */
int check_lmat_blur(int L) {
	int i=0;
	int c = -1;
	while(i<NIMAGE) {
		if((mat_blur[L][i])==NPACK/NIMAGE) {
			c=i;
			i=NIMAGE;
		}
		i++;
	}
	return c;
}

void *productor(void *params) {
	prod_param *parg = (prod_param *) params;
	int err;
	
	//3 cas : on est un blur, on est avant un blur ou bien le cas normal. Si on est avant un blur, il faut lancer la copie de l'image quand, dans mat_blur, on a, pour l'image, le nombre de paquet
	//en lesquels elle a été divisée. Pour cela, il faut un tableau global npackim[NIMAGE] qui donne, pr chaque image, en combien de paquet elle a été divisée ou bien, on divise chaque image en
	//NPACK/NIMAGE de paquet (on divise chacune des images avec le ppcm du nombre de thread), ce qui fait qu'on a le nombre de paquet dans une image avec le nombre de paquet total
	//ces 3 cas sont dans le while
	while((isdone[parg->num_filter])!=NPACK) {
		//cas du filtre blur
		if((parg->isblur)!=0) {
			
			//1e étape : vérifer qu'il y a un des éléments de matblur en la ligne isblur-1
			
			int c = check_lmat_blur((parg->isblur)-1);
			while(c==-1) {
				c = check_lmat_blur((parg->isblur)-1);
			}
			
			//2e étape : on a une image dont le précédent a été appliquer sur toutes les parties. On la copie
			
			err = image_copi(c,parg->num_filter); //on donne le numéro correspondant à l'image et le numéro de la ligne dans le mat_buf où les parties de cette image se trouve. Il faut mettre à jour les éléments read-only des pointeur vers des elem_buf dans cette ligne (note, il est nécessaire d'avoir une structure copie par image mais pas plus ! Car quand on fait une 2e copie pour un 2e blur, alors on peut écraser l'ancienne copie !)
			if (err!=0)
				error(err,"Erreur de image_copi");
			//3e étape : on a fait les copies. Mnt, on doit appeler le consommateur en lui-disant de consommer un elem-buffer mais dont l'image est c
			
			elem_buf *tmp = consommator(parg->num_filter,c);
			elem_buf **paquet = &(tmp);//mettre c en 2e argument permet de dire que tous les elem_buf sont bons, quelque soit l'image
			
			apply_filter(*paquet,parg->num_filter);
			
			err = sem_wait(&(empty[(parg->num_filter)+1])); //amélioration possible du code : ce sem_wait ne sert pas vraiment, vu que on sait de toute façon que les buffer ne vont pas être rempli
			if (err!=0)
				error(err,"sem_wait sur empty dans productor");
			
			err = pthread_mutex_lock(&(buf_mutex[(parg->num_filter)+1]));
			if (err!=0)
				error(err,"pthread_mutex_lock pour buf_mutex dans producteur");
			
			insert_elem(paquet,(parg->num_filter)+1);
			
			update_isdone(parg->num_filter);
			
			err = pthread_mutex_unlock(&(buf_mutex[(parg->num_filter)+1]));
			if (err!=0)
				error(err,"pthread_mutex_unlock pour buf_mutex dans producteur");
			
			err = sem_post(&(full[(parg->num_filter)+1])); //amélioration possible du code : ce sem_wait ne sert pas vraiment, vu que on sait de toute façon que les buffer ne vont pas être rempli
			if (err!=0)
				error(err,"sem_post sur full dans productor");
			
			err = image_copi_destroy(c,parg->num_filter);
			if (err!=0)
				error(err,"Erreur de image_copi_destroy");
			
		} else {
		//cas normal
			
			elem_buf *tmp = consommator(parg->num_filter,-1);
			elem_buf **paquet = &(tmp);//mettre c en 2e argument permet de dire que tous les elem_buf sont bons, quelque soit l'image
			
			apply_filter(tmp,parg->num_filter);
			
			err = sem_wait(&(empty[(parg->num_filter)+1])); //amélioration possible du code : ce sem_wait ne sert pas vraiment, vu que on sait de toute façon que les buffer ne vont pas être rempli
			if (err!=0)
				error(err,"sem_wait sur empty dans productor");
			
			err = pthread_mutex_lock(&(buf_mutex[(parg->num_filter)+1]));
			if (err!=0)
				error(err,"pthread_mutex_lock pour buf_mutex dans producteur");
			
			insert_elem(paquet,(parg->num_filter)+1);
			
			update_isdone(parg->num_filter);
			
			err = pthread_mutex_unlock(&(buf_mutex[(parg->num_filter)+1]));
			if (err!=0)
				error(err,"pthread_mutex_unlock pour buf_mutex dans producteur");
			
			err = sem_post(&(full[(parg->num_filter)+1])); //amélioration possible du code : ce sem_wait ne sert pas vraiment, vu que on sait de toute façon que les buffer ne vont pas être rempli
			if (err!=0)
				error(err,"sem_post sur full dans productor");
			
			//on est avant un filtre blur
			if((parg->beforeblur)!=0) {//parg_beforeblur contient 1 si c'est le premier blur, 2 si c'est le deuxième, ...

				err = pthread_mutex_lock(&(blur_mutex[(parg->beforeblur)-1][(*paquet)->num_img]));
				if (err!=0)
					error(err,"pthread_mutex_lock pour blur_mutex dans producteur");
				
				(mat_blur[(parg->beforeblur)-1][(*paquet)->num_img])++;
				
				err = pthread_mutex_unlock(&(blur_mutex[(parg->beforeblur)-1][(*paquet)->num_img]));
				if (err!=0)
					error(err,"pthread_mutex_unlock pour blur_mutex dans producteur");
			}
		}
	}
	
	pthread_exit(NULL);//quand le filtre a été appliqué sur NPACK, on peut arrêter la thread
}







/*
 * fonction qui lance les threads
 * pre : reçoit un tableau avec le nombre de threads par filtre et le nombre de thread maximal
 *       l'initialisation des constantes doit être effectuées
 *       appel applyfilter via en donnant simplement des numéros comme filtre.
 *       la premiere ligne du buffer mat_buf doit être remplie
 * post : lance les threads et traite les images.
 * Attention : la fonction doit faire des join sur la dernière salve de thread.
 */
void image_treatement(int nthreads[]) {
	
	int nthreadmax = nthreads[0];
	int i;
	for (i=1; i<NFILTERS; i++) {
		if (nthreads[i]>nthreadmax)
			nthreadmax = nthreads[i];
	}
	
	int j;
	prod_param parg[NFILTERS][nthreadmax];
	pthread_t threads[NFILTERS][nthreadmax];
	int err;
	
	
	
	//initialisation des mutex de blur_mutex :
	for(i=0;i<NBLUR;i++) {
		for(j=0;j<NIMAGE;j++) {
			err=pthread_mutex_init(&(blur_mutex[i][j]),NULL);
			if (err!=0)
				error(err,"pthread_mutex_init pour blur_mutex");
		}
	}
	
	//initialisation des sémaphores full et empty et des mutex buf_mutex
	int val_init_full; //valeur initiale des sémaphores dans full
	int val_init_empty; //valeur initiale des sémaphores dans empty
	
	//initilisation des sémaphores full et empty et des mutex de isdone et de buf_mutex
	for(i=0;i<NFILTERS;i++) {
		if(i==0) {
			val_init_full = NPACK;
			val_init_empty = 0;
		} else {
			val_init_full = 0;
			val_init_empty = NPACK;
		}
		printf("i = %d\n",i);
		printf("NPACK = %d\n",NPACK);
		printf("val_init_full = %d\n",val_init_full);
		err = sem_init(&(full[i]),0,val_init_full);
		if (err!=0)
			error(err,"sem_init pour full");
		
		err = sem_init(&(empty[i]),0,val_init_empty);
		if (err!=0)
			error(err,"sem_init pour empty");
		
		err=pthread_mutex_init(&(buf_mutex[i]),NULL);
		if (err!=0)
			error(err,"pthread_mutex_init pour buf_mutex");
		
		err=pthread_mutex_init(&(isdone_mutex[i]),NULL);
		if (err!=0)
			error(err,"pthread_mutex_init pour isdone_mutex");
	}
	
	//lancement des threads des filtres
	for(i=0;i<NFILTERS;i++) {
		for(j=0;j<nthreads[i];j++) {
			(parg[i][j]).num_filter = i;
			(parg[i][j]).isblur = f_isblur[i];
			(parg[i][j]).beforeblur = f_beforeblur[i];
			err = pthread_create(&(threads[i][j]),NULL,&(productor),(void *)(&(parg[i][j])));
			if (err!=0)
				error(err,"pthread_create");
		}
	}
	
	//Attente des threads du dernier filtre
	for(i=0;i<nthreads[NFILTERS-1];i++) {
		err = pthread_join(threads[NFILTERS-1][i],NULL);
		if (err!=0)
			error(err,"pthread_join");
	}
	
	//libération des mutex de blur_mutex
	for(i=0;i<NBLUR;i++) {
		for(j=0;j<NIMAGE;j++) {
			err=pthread_mutex_destroy(&(blur_mutex[i][j]));
			if (err!=0)
				error(err,"pthread_mutex_destroy pour blur_mutex");
		}
	}
	
	//libération des sémaphores full et empty, des mutex de buf_mutex et des mutex de isdone
	for(i=0;i<NFILTERS;i++) {
		err = sem_destroy(&(full[i]));
		if (err!=0)
			error(err,"sem_destroy pour full");
		
		err = sem_destroy(&(empty[i]));
		if (err!=0)
			error(err,"sem_destroy pour empty");
		
		err=pthread_mutex_destroy(&(buf_mutex[i]));
		if (err!=0)
			error(err,"pthread_mutex_destroy pour buf_mutex");
		
		err=pthread_mutex_destroy(&(isdone_mutex[i]));
		if (err!=0)
			error(err,"pthread_mutex_destroy pour isdone_mutex");
	}
}
